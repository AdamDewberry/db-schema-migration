import pandas as pd
import yaml

colunn_subset = ["TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "IS_NULLABLE"]
source_schema = (
    pd.read_csv("schema.csv")
    # Remove white space from column names
    .rename(columns=lambda x: x.strip())
    # Remove white space from rows
    .map(lambda x: x.strip() if isinstance(x, str) else x)[colunn_subset]
)
# Data cleaning to conform to boolean types
source_schema.IS_NULLABLE = source_schema.IS_NULLABLE.apply(
    lambda x: True if x == "YES" else False
)

# Add any additional Attributes or Preconditions as dictionaries in the list below
change_log = {
    "databaseChangeLog": [
        {"objectQuotingStrategy": "QUOTE_ALL_OBJECTS"}
        # , {attributes}
        # , {precondtions}
    ]
}

table_names = source_schema.loc[:, "TABLE_NAME"].unique()
for table_name in table_names:
    change_log["databaseChangeLog"].append(
        {
            "changeSet": {
                "id": f"{table_name}-v0.1.0",
                "author": "Generated by Adam",
                "changes": {
                    "createTable": {
                        "tableName": table_name,
                        "columns": [
                            {
                                "column": {
                                    "name": column_attributes["COLUMN_NAME"],
                                    "type": column_attributes["DATA_TYPE"],
                                    "constraints": {
                                        "nullable": column_attributes["IS_NULLABLE"]
                                    },
                                }
                            }
                            for column_attributes in source_schema[
                                source_schema["TABLE_NAME"] == table_name
                            ].to_dict("records")
                        ]
                        ## To include extra default columns in each table, uncomment the lines below
                        # + [
                        #     {
                        #         "column": {
                        #             "name": "source_systen",
                        #             "type": "VARCHAR",
                        #             "constraints": {"nullable": False},
                        #         }
                        #     }
                        # ],
                    }
                },
            }
        }
    )

with open("changelog.yaml", "w") as yaml_file:
    yaml.dump(
        change_log,
        yaml_file,
        allow_unicode=True,
        default_flow_style=False,
        sort_keys=False,
    )
